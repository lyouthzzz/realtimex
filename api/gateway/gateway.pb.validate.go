// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/gateway/gateway.proto

package gateway

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CheckConnectReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckConnectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckConnectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckConnectReqMultiError, or nil if none found.
func (m *CheckConnectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckConnectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return CheckConnectReqMultiError(errors)
	}

	return nil
}

// CheckConnectReqMultiError is an error wrapping multiple validation errors
// returned by CheckConnectReq.ValidateAll() if the designated constraints
// aren't met.
type CheckConnectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckConnectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckConnectReqMultiError) AllErrors() []error { return m }

// CheckConnectReqValidationError is the validation error returned by
// CheckConnectReq.Validate if the designated constraints aren't met.
type CheckConnectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckConnectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckConnectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckConnectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckConnectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckConnectReqValidationError) ErrorName() string { return "CheckConnectReqValidationError" }

// Error satisfies the builtin error interface
func (e CheckConnectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckConnectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckConnectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckConnectReqValidationError{}

// Validate checks the field values on CheckConnectReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckConnectReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckConnectReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckConnectReplyMultiError, or nil if none found.
func (m *CheckConnectReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckConnectReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return CheckConnectReplyMultiError(errors)
	}

	return nil
}

// CheckConnectReplyMultiError is an error wrapping multiple validation errors
// returned by CheckConnectReply.ValidateAll() if the designated constraints
// aren't met.
type CheckConnectReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckConnectReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckConnectReplyMultiError) AllErrors() []error { return m }

// CheckConnectReplyValidationError is the validation error returned by
// CheckConnectReply.Validate if the designated constraints aren't met.
type CheckConnectReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckConnectReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckConnectReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckConnectReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckConnectReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckConnectReplyValidationError) ErrorName() string {
	return "CheckConnectReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CheckConnectReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckConnectReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckConnectReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckConnectReplyValidationError{}

// Validate checks the field values on CheckTopicReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckTopicReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckTopicReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckTopicReqMultiError, or
// nil if none found.
func (m *CheckTopicReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckTopicReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cmd

	// no validation rules for Topic

	if len(errors) > 0 {
		return CheckTopicReqMultiError(errors)
	}

	return nil
}

// CheckTopicReqMultiError is an error wrapping multiple validation errors
// returned by CheckTopicReq.ValidateAll() if the designated constraints
// aren't met.
type CheckTopicReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckTopicReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckTopicReqMultiError) AllErrors() []error { return m }

// CheckTopicReqValidationError is the validation error returned by
// CheckTopicReq.Validate if the designated constraints aren't met.
type CheckTopicReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckTopicReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckTopicReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckTopicReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckTopicReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckTopicReqValidationError) ErrorName() string { return "CheckTopicReqValidationError" }

// Error satisfies the builtin error interface
func (e CheckTopicReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckTopicReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckTopicReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckTopicReqValidationError{}

// Validate checks the field values on CheckTopicReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckTopicReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckTopicReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckTopicReplyMultiError, or nil if none found.
func (m *CheckTopicReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckTopicReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	// no validation rules for Msg

	if len(errors) > 0 {
		return CheckTopicReplyMultiError(errors)
	}

	return nil
}

// CheckTopicReplyMultiError is an error wrapping multiple validation errors
// returned by CheckTopicReply.ValidateAll() if the designated constraints
// aren't met.
type CheckTopicReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckTopicReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckTopicReplyMultiError) AllErrors() []error { return m }

// CheckTopicReplyValidationError is the validation error returned by
// CheckTopicReply.Validate if the designated constraints aren't met.
type CheckTopicReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckTopicReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckTopicReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckTopicReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckTopicReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckTopicReplyValidationError) ErrorName() string { return "CheckTopicReplyValidationError" }

// Error satisfies the builtin error interface
func (e CheckTopicReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckTopicReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckTopicReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckTopicReplyValidationError{}
