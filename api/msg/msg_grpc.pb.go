// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: api/msg/msg.proto

package msg

import (
	context "context"
	protocol "github.com/lyouthzzz/realtimex/api/protocol"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReceiveServiceClient is the client API for ReceiveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReceiveServiceClient interface {
	// 连接
	Connect(ctx context.Context, in *protocol.ConnectPacket, opts ...grpc.CallOption) (*protocol.ConnectAckPacket, error)
	// 订阅主题
	Subscribe(ctx context.Context, in *protocol.SubscribePacket, opts ...grpc.CallOption) (*protocol.SubscribeAckPacket, error)
	// 取消订阅主题
	Unsubscribe(ctx context.Context, in *protocol.UnsubscribePacket, opts ...grpc.CallOption) (*protocol.UnsubscribeAckPacket, error)
	// 发布消息
	Publish(ctx context.Context, in *protocol.PublishPacket, opts ...grpc.CallOption) (*protocol.PublishAckPacket, error)
	// 心跳
	Ping(ctx context.Context, in *protocol.PingReqPacket, opts ...grpc.CallOption) (*protocol.PingRespPacket, error)
	// 断开连接
	Disconnect(ctx context.Context, in *protocol.DisconnectPacket, opts ...grpc.CallOption) (*protocol.DisconnectAckPacket, error)
}

type receiveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiveServiceClient(cc grpc.ClientConnInterface) ReceiveServiceClient {
	return &receiveServiceClient{cc}
}

func (c *receiveServiceClient) Connect(ctx context.Context, in *protocol.ConnectPacket, opts ...grpc.CallOption) (*protocol.ConnectAckPacket, error) {
	out := new(protocol.ConnectAckPacket)
	err := c.cc.Invoke(ctx, "/realtimex.msg.ReceiveService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiveServiceClient) Subscribe(ctx context.Context, in *protocol.SubscribePacket, opts ...grpc.CallOption) (*protocol.SubscribeAckPacket, error) {
	out := new(protocol.SubscribeAckPacket)
	err := c.cc.Invoke(ctx, "/realtimex.msg.ReceiveService/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiveServiceClient) Unsubscribe(ctx context.Context, in *protocol.UnsubscribePacket, opts ...grpc.CallOption) (*protocol.UnsubscribeAckPacket, error) {
	out := new(protocol.UnsubscribeAckPacket)
	err := c.cc.Invoke(ctx, "/realtimex.msg.ReceiveService/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiveServiceClient) Publish(ctx context.Context, in *protocol.PublishPacket, opts ...grpc.CallOption) (*protocol.PublishAckPacket, error) {
	out := new(protocol.PublishAckPacket)
	err := c.cc.Invoke(ctx, "/realtimex.msg.ReceiveService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiveServiceClient) Ping(ctx context.Context, in *protocol.PingReqPacket, opts ...grpc.CallOption) (*protocol.PingRespPacket, error) {
	out := new(protocol.PingRespPacket)
	err := c.cc.Invoke(ctx, "/realtimex.msg.ReceiveService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiveServiceClient) Disconnect(ctx context.Context, in *protocol.DisconnectPacket, opts ...grpc.CallOption) (*protocol.DisconnectAckPacket, error) {
	out := new(protocol.DisconnectAckPacket)
	err := c.cc.Invoke(ctx, "/realtimex.msg.ReceiveService/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiveServiceServer is the server API for ReceiveService service.
// All implementations must embed UnimplementedReceiveServiceServer
// for forward compatibility
type ReceiveServiceServer interface {
	// 连接
	Connect(context.Context, *protocol.ConnectPacket) (*protocol.ConnectAckPacket, error)
	// 订阅主题
	Subscribe(context.Context, *protocol.SubscribePacket) (*protocol.SubscribeAckPacket, error)
	// 取消订阅主题
	Unsubscribe(context.Context, *protocol.UnsubscribePacket) (*protocol.UnsubscribeAckPacket, error)
	// 发布消息
	Publish(context.Context, *protocol.PublishPacket) (*protocol.PublishAckPacket, error)
	// 心跳
	Ping(context.Context, *protocol.PingReqPacket) (*protocol.PingRespPacket, error)
	// 断开连接
	Disconnect(context.Context, *protocol.DisconnectPacket) (*protocol.DisconnectAckPacket, error)
	mustEmbedUnimplementedReceiveServiceServer()
}

// UnimplementedReceiveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReceiveServiceServer struct {
}

func (UnimplementedReceiveServiceServer) Connect(context.Context, *protocol.ConnectPacket) (*protocol.ConnectAckPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedReceiveServiceServer) Subscribe(context.Context, *protocol.SubscribePacket) (*protocol.SubscribeAckPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedReceiveServiceServer) Unsubscribe(context.Context, *protocol.UnsubscribePacket) (*protocol.UnsubscribeAckPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedReceiveServiceServer) Publish(context.Context, *protocol.PublishPacket) (*protocol.PublishAckPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedReceiveServiceServer) Ping(context.Context, *protocol.PingReqPacket) (*protocol.PingRespPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedReceiveServiceServer) Disconnect(context.Context, *protocol.DisconnectPacket) (*protocol.DisconnectAckPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedReceiveServiceServer) mustEmbedUnimplementedReceiveServiceServer() {}

// UnsafeReceiveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceiveServiceServer will
// result in compilation errors.
type UnsafeReceiveServiceServer interface {
	mustEmbedUnimplementedReceiveServiceServer()
}

func RegisterReceiveServiceServer(s grpc.ServiceRegistrar, srv ReceiveServiceServer) {
	s.RegisterService(&ReceiveService_ServiceDesc, srv)
}

func _ReceiveService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.ConnectPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiveServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realtimex.msg.ReceiveService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiveServiceServer).Connect(ctx, req.(*protocol.ConnectPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiveService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.SubscribePacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiveServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realtimex.msg.ReceiveService/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiveServiceServer).Subscribe(ctx, req.(*protocol.SubscribePacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiveService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.UnsubscribePacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiveServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realtimex.msg.ReceiveService/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiveServiceServer).Unsubscribe(ctx, req.(*protocol.UnsubscribePacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiveService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.PublishPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiveServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realtimex.msg.ReceiveService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiveServiceServer).Publish(ctx, req.(*protocol.PublishPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiveService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.PingReqPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiveServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realtimex.msg.ReceiveService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiveServiceServer).Ping(ctx, req.(*protocol.PingReqPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiveService_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.DisconnectPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiveServiceServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realtimex.msg.ReceiveService/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiveServiceServer).Disconnect(ctx, req.(*protocol.DisconnectPacket))
	}
	return interceptor(ctx, in, info, handler)
}

// ReceiveService_ServiceDesc is the grpc.ServiceDesc for ReceiveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReceiveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "realtimex.msg.ReceiveService",
	HandlerType: (*ReceiveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _ReceiveService_Connect_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _ReceiveService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _ReceiveService_Unsubscribe_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _ReceiveService_Publish_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ReceiveService_Ping_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _ReceiveService_Disconnect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/msg/msg.proto",
}

// PushServiceClient is the client API for PushService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PushServiceClient interface {
	// 按照主题广播消息
	BroadcastTopicMsg(ctx context.Context, in *protocol.PublishPacket, opts ...grpc.CallOption) (*protocol.PublishAckPacket, error)
	// 推送到消息
	PushUserMsg(ctx context.Context, in *PushUserMsgReq, opts ...grpc.CallOption) (*PushUserMsgResp, error)
}

type pushServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPushServiceClient(cc grpc.ClientConnInterface) PushServiceClient {
	return &pushServiceClient{cc}
}

func (c *pushServiceClient) BroadcastTopicMsg(ctx context.Context, in *protocol.PublishPacket, opts ...grpc.CallOption) (*protocol.PublishAckPacket, error) {
	out := new(protocol.PublishAckPacket)
	err := c.cc.Invoke(ctx, "/realtimex.msg.PushService/BroadcastTopicMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) PushUserMsg(ctx context.Context, in *PushUserMsgReq, opts ...grpc.CallOption) (*PushUserMsgResp, error) {
	out := new(PushUserMsgResp)
	err := c.cc.Invoke(ctx, "/realtimex.msg.PushService/PushUserMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushServiceServer is the server API for PushService service.
// All implementations must embed UnimplementedPushServiceServer
// for forward compatibility
type PushServiceServer interface {
	// 按照主题广播消息
	BroadcastTopicMsg(context.Context, *protocol.PublishPacket) (*protocol.PublishAckPacket, error)
	// 推送到消息
	PushUserMsg(context.Context, *PushUserMsgReq) (*PushUserMsgResp, error)
	mustEmbedUnimplementedPushServiceServer()
}

// UnimplementedPushServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPushServiceServer struct {
}

func (UnimplementedPushServiceServer) BroadcastTopicMsg(context.Context, *protocol.PublishPacket) (*protocol.PublishAckPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastTopicMsg not implemented")
}
func (UnimplementedPushServiceServer) PushUserMsg(context.Context, *PushUserMsgReq) (*PushUserMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushUserMsg not implemented")
}
func (UnimplementedPushServiceServer) mustEmbedUnimplementedPushServiceServer() {}

// UnsafePushServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushServiceServer will
// result in compilation errors.
type UnsafePushServiceServer interface {
	mustEmbedUnimplementedPushServiceServer()
}

func RegisterPushServiceServer(s grpc.ServiceRegistrar, srv PushServiceServer) {
	s.RegisterService(&PushService_ServiceDesc, srv)
}

func _PushService_BroadcastTopicMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.PublishPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).BroadcastTopicMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realtimex.msg.PushService/BroadcastTopicMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).BroadcastTopicMsg(ctx, req.(*protocol.PublishPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_PushUserMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushUserMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).PushUserMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realtimex.msg.PushService/PushUserMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).PushUserMsg(ctx, req.(*PushUserMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PushService_ServiceDesc is the grpc.ServiceDesc for PushService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PushService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "realtimex.msg.PushService",
	HandlerType: (*PushServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadcastTopicMsg",
			Handler:    _PushService_BroadcastTopicMsg_Handler,
		},
		{
			MethodName: "PushUserMsg",
			Handler:    _PushService_PushUserMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/msg/msg.proto",
}
