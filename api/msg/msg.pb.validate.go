// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/msg/msg.proto

package msg

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SubscribeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubscribeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubscribeReqMultiError, or
// nil if none found.
func (m *SubscribeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MsgId

	if len(errors) > 0 {
		return SubscribeReqMultiError(errors)
	}

	return nil
}

// SubscribeReqMultiError is an error wrapping multiple validation errors
// returned by SubscribeReq.ValidateAll() if the designated constraints aren't met.
type SubscribeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeReqMultiError) AllErrors() []error { return m }

// SubscribeReqValidationError is the validation error returned by
// SubscribeReq.Validate if the designated constraints aren't met.
type SubscribeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeReqValidationError) ErrorName() string { return "SubscribeReqValidationError" }

// Error satisfies the builtin error interface
func (e SubscribeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeReqValidationError{}

// Validate checks the field values on SubscribeAck with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubscribeAck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeAck with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubscribeAckMultiError, or
// nil if none found.
func (m *SubscribeAck) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeAck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MsgId

	if len(errors) > 0 {
		return SubscribeAckMultiError(errors)
	}

	return nil
}

// SubscribeAckMultiError is an error wrapping multiple validation errors
// returned by SubscribeAck.ValidateAll() if the designated constraints aren't met.
type SubscribeAckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeAckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeAckMultiError) AllErrors() []error { return m }

// SubscribeAckValidationError is the validation error returned by
// SubscribeAck.Validate if the designated constraints aren't met.
type SubscribeAckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeAckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeAckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeAckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeAckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeAckValidationError) ErrorName() string { return "SubscribeAckValidationError" }

// Error satisfies the builtin error interface
func (e SubscribeAckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeAck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeAckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeAckValidationError{}

// Validate checks the field values on UnsubscribeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnsubscribeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsubscribeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnsubscribeReqMultiError,
// or nil if none found.
func (m *UnsubscribeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsubscribeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MsgId

	if len(errors) > 0 {
		return UnsubscribeReqMultiError(errors)
	}

	return nil
}

// UnsubscribeReqMultiError is an error wrapping multiple validation errors
// returned by UnsubscribeReq.ValidateAll() if the designated constraints
// aren't met.
type UnsubscribeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsubscribeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsubscribeReqMultiError) AllErrors() []error { return m }

// UnsubscribeReqValidationError is the validation error returned by
// UnsubscribeReq.Validate if the designated constraints aren't met.
type UnsubscribeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsubscribeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsubscribeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsubscribeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsubscribeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsubscribeReqValidationError) ErrorName() string { return "UnsubscribeReqValidationError" }

// Error satisfies the builtin error interface
func (e UnsubscribeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsubscribeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsubscribeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsubscribeReqValidationError{}

// Validate checks the field values on UnsubscribeAck with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnsubscribeAck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsubscribeAck with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnsubscribeAckMultiError,
// or nil if none found.
func (m *UnsubscribeAck) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsubscribeAck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MsgId

	if len(errors) > 0 {
		return UnsubscribeAckMultiError(errors)
	}

	return nil
}

// UnsubscribeAckMultiError is an error wrapping multiple validation errors
// returned by UnsubscribeAck.ValidateAll() if the designated constraints
// aren't met.
type UnsubscribeAckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsubscribeAckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsubscribeAckMultiError) AllErrors() []error { return m }

// UnsubscribeAckValidationError is the validation error returned by
// UnsubscribeAck.Validate if the designated constraints aren't met.
type UnsubscribeAckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsubscribeAckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsubscribeAckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsubscribeAckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsubscribeAckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsubscribeAckValidationError) ErrorName() string { return "UnsubscribeAckValidationError" }

// Error satisfies the builtin error interface
func (e UnsubscribeAckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsubscribeAck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsubscribeAckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsubscribeAckValidationError{}

// Validate checks the field values on PublishReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PublishReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PublishReqMultiError, or
// nil if none found.
func (m *PublishReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Topic

	// no validation rules for MsgId

	// no validation rules for Payload

	if len(errors) > 0 {
		return PublishReqMultiError(errors)
	}

	return nil
}

// PublishReqMultiError is an error wrapping multiple validation errors
// returned by PublishReq.ValidateAll() if the designated constraints aren't met.
type PublishReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishReqMultiError) AllErrors() []error { return m }

// PublishReqValidationError is the validation error returned by
// PublishReq.Validate if the designated constraints aren't met.
type PublishReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishReqValidationError) ErrorName() string { return "PublishReqValidationError" }

// Error satisfies the builtin error interface
func (e PublishReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishReqValidationError{}

// Validate checks the field values on PublishAck with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PublishAck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishAck with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PublishAckMultiError, or
// nil if none found.
func (m *PublishAck) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishAck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MsgId

	if len(errors) > 0 {
		return PublishAckMultiError(errors)
	}

	return nil
}

// PublishAckMultiError is an error wrapping multiple validation errors
// returned by PublishAck.ValidateAll() if the designated constraints aren't met.
type PublishAckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishAckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishAckMultiError) AllErrors() []error { return m }

// PublishAckValidationError is the validation error returned by
// PublishAck.Validate if the designated constraints aren't met.
type PublishAckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishAckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishAckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishAckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishAckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishAckValidationError) ErrorName() string { return "PublishAckValidationError" }

// Error satisfies the builtin error interface
func (e PublishAckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishAck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishAckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishAckValidationError{}

// Validate checks the field values on PingReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PingReqMultiError, or nil if none found.
func (m *PingReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PingReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PingReqMultiError(errors)
	}

	return nil
}

// PingReqMultiError is an error wrapping multiple validation errors returned
// by PingReq.ValidateAll() if the designated constraints aren't met.
type PingReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingReqMultiError) AllErrors() []error { return m }

// PingReqValidationError is the validation error returned by PingReq.Validate
// if the designated constraints aren't met.
type PingReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingReqValidationError) ErrorName() string { return "PingReqValidationError" }

// Error satisfies the builtin error interface
func (e PingReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingReqValidationError{}

// Validate checks the field values on PingAck with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingAck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingAck with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PingAckMultiError, or nil if none found.
func (m *PingAck) ValidateAll() error {
	return m.validate(true)
}

func (m *PingAck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PingAckMultiError(errors)
	}

	return nil
}

// PingAckMultiError is an error wrapping multiple validation errors returned
// by PingAck.ValidateAll() if the designated constraints aren't met.
type PingAckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingAckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingAckMultiError) AllErrors() []error { return m }

// PingAckValidationError is the validation error returned by PingAck.Validate
// if the designated constraints aren't met.
type PingAckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingAckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingAckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingAckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingAckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingAckValidationError) ErrorName() string { return "PingAckValidationError" }

// Error satisfies the builtin error interface
func (e PingAckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingAck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingAckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingAckValidationError{}

// Validate checks the field values on ConnectReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConnectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConnectReqMultiError, or
// nil if none found.
func (m *ConnectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConnectReqMultiError(errors)
	}

	return nil
}

// ConnectReqMultiError is an error wrapping multiple validation errors
// returned by ConnectReq.ValidateAll() if the designated constraints aren't met.
type ConnectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectReqMultiError) AllErrors() []error { return m }

// ConnectReqValidationError is the validation error returned by
// ConnectReq.Validate if the designated constraints aren't met.
type ConnectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectReqValidationError) ErrorName() string { return "ConnectReqValidationError" }

// Error satisfies the builtin error interface
func (e ConnectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectReqValidationError{}

// Validate checks the field values on ConnectAck with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConnectAck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectAck with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConnectAckMultiError, or
// nil if none found.
func (m *ConnectAck) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectAck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConnectAckMultiError(errors)
	}

	return nil
}

// ConnectAckMultiError is an error wrapping multiple validation errors
// returned by ConnectAck.ValidateAll() if the designated constraints aren't met.
type ConnectAckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectAckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectAckMultiError) AllErrors() []error { return m }

// ConnectAckValidationError is the validation error returned by
// ConnectAck.Validate if the designated constraints aren't met.
type ConnectAckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectAckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectAckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectAckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectAckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectAckValidationError) ErrorName() string { return "ConnectAckValidationError" }

// Error satisfies the builtin error interface
func (e ConnectAckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectAck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectAckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectAckValidationError{}

// Validate checks the field values on DisconnectReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DisconnectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisconnectReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DisconnectReqMultiError, or
// nil if none found.
func (m *DisconnectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DisconnectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisconnectReqMultiError(errors)
	}

	return nil
}

// DisconnectReqMultiError is an error wrapping multiple validation errors
// returned by DisconnectReq.ValidateAll() if the designated constraints
// aren't met.
type DisconnectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisconnectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisconnectReqMultiError) AllErrors() []error { return m }

// DisconnectReqValidationError is the validation error returned by
// DisconnectReq.Validate if the designated constraints aren't met.
type DisconnectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisconnectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisconnectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisconnectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisconnectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisconnectReqValidationError) ErrorName() string { return "DisconnectReqValidationError" }

// Error satisfies the builtin error interface
func (e DisconnectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisconnectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisconnectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisconnectReqValidationError{}

// Validate checks the field values on DisconnectAck with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DisconnectAck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisconnectAck with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DisconnectAckMultiError, or
// nil if none found.
func (m *DisconnectAck) ValidateAll() error {
	return m.validate(true)
}

func (m *DisconnectAck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisconnectAckMultiError(errors)
	}

	return nil
}

// DisconnectAckMultiError is an error wrapping multiple validation errors
// returned by DisconnectAck.ValidateAll() if the designated constraints
// aren't met.
type DisconnectAckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisconnectAckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisconnectAckMultiError) AllErrors() []error { return m }

// DisconnectAckValidationError is the validation error returned by
// DisconnectAck.Validate if the designated constraints aren't met.
type DisconnectAckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisconnectAckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisconnectAckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisconnectAckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisconnectAckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisconnectAckValidationError) ErrorName() string { return "DisconnectAckValidationError" }

// Error satisfies the builtin error interface
func (e DisconnectAckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisconnectAck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisconnectAckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisconnectAckValidationError{}

// Validate checks the field values on PushMsg with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushMsg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushMsg with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PushMsgMultiError, or nil if none found.
func (m *PushMsg) ValidateAll() error {
	return m.validate(true)
}

func (m *PushMsg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Topic

	// no validation rules for MsgId

	// no validation rules for Payload

	if len(errors) > 0 {
		return PushMsgMultiError(errors)
	}

	return nil
}

// PushMsgMultiError is an error wrapping multiple validation errors returned
// by PushMsg.ValidateAll() if the designated constraints aren't met.
type PushMsgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushMsgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushMsgMultiError) AllErrors() []error { return m }

// PushMsgValidationError is the validation error returned by PushMsg.Validate
// if the designated constraints aren't met.
type PushMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushMsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushMsgValidationError) ErrorName() string { return "PushMsgValidationError" }

// Error satisfies the builtin error interface
func (e PushMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushMsgValidationError{}

// Validate checks the field values on PushMsgResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushMsgResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushMsgResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushMsgRespMultiError, or
// nil if none found.
func (m *PushMsgResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PushMsgResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PushMsgRespMultiError(errors)
	}

	return nil
}

// PushMsgRespMultiError is an error wrapping multiple validation errors
// returned by PushMsgResp.ValidateAll() if the designated constraints aren't met.
type PushMsgRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushMsgRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushMsgRespMultiError) AllErrors() []error { return m }

// PushMsgRespValidationError is the validation error returned by
// PushMsgResp.Validate if the designated constraints aren't met.
type PushMsgRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushMsgRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushMsgRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushMsgRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushMsgRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushMsgRespValidationError) ErrorName() string { return "PushMsgRespValidationError" }

// Error satisfies the builtin error interface
func (e PushMsgRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushMsgResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushMsgRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushMsgRespValidationError{}

// Validate checks the field values on BroadcastResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BroadcastResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BroadcastResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BroadcastRespMultiError, or
// nil if none found.
func (m *BroadcastResp) ValidateAll() error {
	return m.validate(true)
}

func (m *BroadcastResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BroadcastRespMultiError(errors)
	}

	return nil
}

// BroadcastRespMultiError is an error wrapping multiple validation errors
// returned by BroadcastResp.ValidateAll() if the designated constraints
// aren't met.
type BroadcastRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BroadcastRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BroadcastRespMultiError) AllErrors() []error { return m }

// BroadcastRespValidationError is the validation error returned by
// BroadcastResp.Validate if the designated constraints aren't met.
type BroadcastRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BroadcastRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BroadcastRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BroadcastRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BroadcastRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BroadcastRespValidationError) ErrorName() string { return "BroadcastRespValidationError" }

// Error satisfies the builtin error interface
func (e BroadcastRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBroadcastResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BroadcastRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BroadcastRespValidationError{}
